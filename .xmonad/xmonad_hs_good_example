{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, TypeSynonymInstances, FlexibleContexts, NoMonomorphismRestriction #-}
import XMonad
import XMonad.Util.EZConfig
import XMonad.Hooks.UrgencyHook
import XMonad.Hooks.DynamicLog
import XMonad.Util.Run(spawnPipe)
import XMonad.Hooks.FadeInactive
import Control.Monad
import System.IO
import XMonad.Layout.IM
import qualified XMonad.StackSet as S
import XMonad.Actions.CycleWS
import XMonad.Actions.UpdatePointer
import XMonad.Config.Gnome
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Layout.Circle
import XMonad.Layout.Combo
import XMonad.Layout.Grid
import XMonad.Layout.LayoutModifier
import XMonad.Layout.Named
import XMonad.Layout.NoBorders
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Reflect
import XMonad.Layout.TwoPane
import XMonad.Layout.Spacing
import XMonad.Layout.Grid
import XMonad.Layout.WindowNavigation
import XMonad.Layout.LayoutHints
import XMonad.Util.WindowProperties
import XMonad.Hooks.SetWMName
import XMonad.Actions.NoBorders
import Control.OldException
import Control.Monad
import XMonad.Hooks.DynamicLog
import Data.Ratio
import qualified Data.Map as M
import Data.Char
import Graphics.X11.ExtraTypes.XF86
-- import qualified DBus.Client.Simple as D
import qualified Codec.Binary.UTF8.String as UTF8
-- defaults on which we build
-- use e.g. defaultConfig or gnomeConfig
myBaseConfig = gnomeConfig

-- display
-- replace the bright red border with a more stylish colour
myBorderWidth = 0
myNormalBorderColor = "#107030"
myFocusedBorderColor = "#30A0C0"
noKeyMask = 0

-- workspaces
myWorkspaces = ["editor", "term", "web", "mail", "gimp", "files", "music", "fullscreen", "im"]

isFullscreen = (== "fullscreen")
 
-- layouts
basicLayout = spacing 4 $ Tall nmaster delta ratio where
    nmaster = 1
    delta   = 3/100
    ratio   = 1/2
tallLayout = layoutHints $ named "tall" $ avoidStruts $ smartBorders basicLayout
wideLayout = named "wide" $ avoidStruts $ Mirror basicLayout
singleLayout = named "single" $ avoidStruts $ smartBorders Full
gridLayout = named "grid" $ avoidStruts $ smartBorders Grid
fullscreenLayout = named "fullscreen" $ noBorders Full
-- imLayout = avoidStruts $ reflectHoriz $ withIMs ratio rosters chatLayout where
imLayout = avoidStruts $ withIMs ratio rosters chatLayout where
    chatLayout      = Grid
    ratio           = 1%3
    rosters         = [skypeRoster, pidginRoster]
    pidginRoster    = Or (And (ClassName "Pidgin") (Role "buddy_list")) (And (ClassName "Empathy") (Role "contact_list"))
    skypeRoster     = (ClassName "Skype") `And` (Not (Title "Options")) `And` (Not (Role "Chats")) `And` (Not (Role "CallWindowForm"))
 
gimpLayout = withIM (0.11) (Role "gimp-toolbox") $
             reflectHoriz $
             withIM (0.15) (Role "gimp-dock") Full

myLayoutHook = smartBorders $ fullscreen $ im $ gimp $ mail $ normal where
    normal     = tallLayout ||| wideLayout ||| gridLayout ||| singleLayout ||| Circle
    fullscreen = onWorkspace "fullscreen" fullscreenLayout
    mail       = onWorkspace "mail" fullscreenLayout
    im         = onWorkspace "im" imLayout
    gimp       = onWorkspace "gimp" gimpLayout
 
-- special treatment for specific windows:
-- put the Pidgin and Skype windows in the im workspace
myManageHook = composeAll
    [ className =? "Gimp"      --> doFloat
    , className =? "Vncviewer" --> doFloat
    , resource  =? "Do" --> doIgnore
    , className =? "update-manager" --> doIgnore
    , className  =? "/usr/lib/gnome-do/Do.exe" --> doIgnore
    , className  =? "Unity-2d-panel" --> doIgnore
    , className  =? "Unity-2d-launcher" --> doFloat
    , XMonad.Hooks.ManageHelpers.isFullscreen =? True --> doFullFloat
    ] <+> imManageHooks <+> manageDocks <+> manageHook myBaseConfig

imManageHooks = (composeAll . concat $
    [ [isDialog --> doShift =<< currentWs]
    , [className =? c --> doShift "music" | c <- musicWin]
    , [className =? c --> doShift "im"    | c <- imWin]
    , [stringProperty "WM_WINDOW_ROLE" =? c --> doShift "mail" | c <- mailWin]
    , [className =? c --> doShift "web"  | c <- webWin]
    , [className =? c --> doShift "files" | c <- filesWin]
    , [className =? c --> doShift "gimp"  | c <- gimpWin]
    , [className =? c --> doShift "editor" | c <- editorWin]
    ]) where
    musicWin = ["Rhythmbox","Tomahawk","Banshee","Banshee Media Player","banshee-1","Exaile","Spotify"]
    imWin = ["Pidgin"]
    webWin = ["Firefox", "Chromium-browser"]
    filesWin = ["Nautilus"]
    gimpWin = ["Gimp-2.6"]
    mailWin = ["crx_ejidjjhkpiempkbhmpbfngldlkglhimk"]
    editorWin = ["Emacs"]

 
-- Mod4 is the Super / Windows key
myModMask = mod4Mask
altMask = mod1Mask
 
-- better keybindings for dvorak
myKeys conf = M.fromList $
    [ ((myModMask              , xK_Return), spawn $ XMonad.terminal conf)
    , ((myModMask, xK_c     ), kill)
    , ((myModMask              , xK_space ), sendMessage NextLayout)
    , ((myModMask .|. shiftMask, xK_n     ), refresh)
    , ((myModMask              , xK_minus ), windows S.swapMaster)
    , ((myModMask              , xK_h     ), windows S.focusDown)
    , ((myModMask              , xK_t     ), windows S.focusUp)
    , ((myModMask .|. shiftMask, xK_h     ), windows S.swapDown)
    , ((myModMask .|. shiftMask, xK_t     ), windows S.swapUp)
    , ((myModMask              , xK_d     ), sendMessage Shrink)
    , ((myModMask              , xK_n     ), sendMessage Expand)
    , ((myModMask              , xK_g     ), withFocused toggleBorder)
    , ((myModMask .|. altMask  , xK_t     ), withFocused $ windows . S.sink)
    , ((myModMask              , xK_w     ), sendMessage (IncMasterN 1))
    , ((myModMask .|. shiftMask, xK_w     ), sendMessage (IncMasterN (-1)))
    , ((myModMask              , xK_q     ), broadcastMessage ReleaseResources >> restart "xmonad" True)
    , ((myModMask .|. shiftMask, xK_a     ), focusUrgent)
    , ((myModMask .|. shiftMask, xK_q     ), spawn "gnome-session-save --kill")
    , ((altMask .|. controlMask, xK_Left  ), prevWS)
    , ((altMask .|. controlMask, xK_Right ), nextWS)
    , ((mod4Mask, xK_v), spawn "vim -g")

-- kinesis
--    , ((myModMask .|. shiftMask, xK_c     ), kill)
--    , ((myModMask              , xK_minus ), windows S.swapMaster)
--    , (xK_KP_Down, windows S.focusDown)
--    , ((myModMask              , xK_t     ), windows S.focusUp)
--    , ((myModMask .|. shiftMask, xK_h     ), windows S.swapDown)
--    , ((myModMask .|. shiftMask, xK_t     ), windows S.swapUp)
--    , ((myModMask              , xK_d     ), sendMessage Shrink)
--    , ((myModMask              , xK_n     ), sendMessage Expand)




--    , ((mod4Mask, xK_f), spawn "chromium-browser")
--    , ((mod4Mask, xK_p), spawn "gnome-do")
    , ((mod4Mask .|. shiftMask, xK_p), spawn "/home/oscar/.bin/gyazo")
    , ((mod4Mask, xK_l), spawn "nautilus --no-desktop /home/oscar")
    , ((mod4Mask .|. shiftMask, xK_l), spawn "gnome-screensaver-command -l")
    , ((mod4Mask, xK_o), nextScreen)
    , ((mod4Mask .|. shiftMask, xK_o), shiftNextScreen)
    , ((mod4Mask .|. mod1Mask, xK_o), swapNextScreen)
    , ((altMask, xF86XK_AudioPlay), spawn "spotysend PlayPause")
    , ((altMask, xF86XK_AudioPrev), spawn "spotysend Previous")
    , ((altMask, xF86XK_AudioNext), spawn "spotysend Next")
-- find more of these keys on http://hackage.haskell.org/packages/archive/X11/1.5.0.1/doc/html/Graphics-X11-ExtraTypes-XF86.html
    ] ++
    [ ((myModMask, k), windows $ S.greedyView i)
        | (i, k) <- zip myWorkspaces workspaceKeys
    ] ++
    -- mod+F1..F10 moves window to workspace and switches to that workspace
    [ (((myModMask .|. shiftMask), k), (windows $ S.shift i) >> (windows $ S.greedyView i))
        | (i, k) <- zip myWorkspaces workspaceKeys
    ] ++
    -- mod+alt+F1..F10 moves window to workspace without switching to that workspace
    [ (((myModMask .|. altMask), k), (windows $ S.shift i))
        | (i, k) <- zip myWorkspaces workspaceKeys
    ] 
    where workspaceKeys = [xK_1 .. xK_9]
 
-- mouse bindings that mimic Gnome's
myMouseBindings (XConfig {XMonad.modMask = modMask}) = M.fromList $
    [ ((altMask, button1), (\w -> focus w >> mouseMoveWindow w))
    , ((altMask, button2), (\w -> focus w >> mouseResizeWindow w))
    , ((altMask, button3), (\w -> focus w >> (withFocused $ windows . S.sink)))
    , ((altMask, button4), (const $ windows S.swapUp))
    , ((altMask, button5), (const $ windows S.swapDown))
    ]


--- take focus
atom_WM_TAKE_FOCUS ::
  X Atom
atom_WM_TAKE_FOCUS =
  getAtom "WM_TAKE_FOCUS"
 
takeFocusX ::
  Window
  -> X ()
takeFocusX w =
  withWindowSet . const $ do
    dpy       <- asks display
    wmtakef   <- atom_WM_TAKE_FOCUS
    wmprot    <- atom_WM_PROTOCOLS
    protocols <- io $ getWMProtocols dpy w
    when (wmtakef `elem` protocols) $
      io . allocaXEvent $ \ev -> do
          setEventType ev clientMessage
          setClientMessageEvent ev w wmprot 32 wmtakef currentTime
          sendEvent dpy w False noEventMask ev
 
takeTopFocus ::
  X ()
takeTopFocus =
  withWindowSet $ maybe (setFocusX =<< asks theRoot) takeFocusX . S.peek
-- end take focus


-- put it all together
main :: IO ()
main = do
  --dbus <- D.connectSession
  --getWellKnownName dbus
  xmonad $ ewmh myBaseConfig
        { modMask = myModMask
        , handleEventHook = fullscreenEventHook
        , workspaces = myWorkspaces
        , logHook = takeTopFocus >> setWMName "LG3D" >> updatePointer (Relative 0.5 0.5)
        --, logHook = dynamicLogWithPP (prettyPrinter dbus)
        , layoutHook = myLayoutHook
        , manageHook = myManageHook
        , borderWidth = myBorderWidth
        , normalBorderColor = myNormalBorderColor
        , focusedBorderColor = myFocusedBorderColor
        , keys = myKeys
        , mouseBindings = myMouseBindings
        , terminal = "gnome-terminal"
        }

-- modified version of XMonad.Layout.IM --
 
-- | Data type for LayoutModifier which converts given layout to IM-layout
-- (with dedicated space for the roster and original layout for chat windows)
data AddRosters a = AddRosters Rational [Property] deriving (Read, Show)
 
instance LayoutModifier AddRosters Window where
  modifyLayout (AddRosters ratio props) = applyIMs ratio props
  modifierDescription _                = "IMs"
 
-- | Modifier which converts given layout to IMs-layout (with dedicated
-- space for rosters and original layout for chat windows)
withIMs :: LayoutClass l a => Rational -> [Property] -> l a -> ModifiedLayout AddRosters l a
withIMs ratio props = ModifiedLayout $ AddRosters ratio props
 
-- | IM layout modifier applied to the Grid layout
gridIMs :: Rational -> [Property] -> ModifiedLayout AddRosters Grid a
gridIMs ratio props = withIMs ratio props Grid
 
hasAnyProperty :: [Property] -> Window -> X Bool
hasAnyProperty [] _ = return False
hasAnyProperty (p:ps) w = do
    b <- hasProperty p w
    if b then return True else hasAnyProperty ps w
 
-- | Internal function for placing the rosters specified by
-- the properties and running original layout for all chat windows
applyIMs :: (LayoutClass l Window) =>
               Rational
            -> [Property]
            -> S.Workspace WorkspaceId (l Window) Window
            -> Rectangle
            -> X ([(Window, Rectangle)], Maybe (l Window))
applyIMs ratio props wksp rect = do
    let stack = S.stack wksp
    let ws = S.integrate' $ stack
    rosters <- filterM (hasAnyProperty props) ws
    let n = fromIntegral $ length rosters
    let (rostersRect, chatsRect) = splitHorizontallyBy (n * ratio) rect
    let rosterRects = splitHorizontally n rostersRect
    let filteredStack = stack >>= S.filter (`notElem` rosters)
    wrs <- runLayout (wksp {S.stack = filteredStack}) chatsRect
    return ((zip rosters rosterRects) ++ fst wrs, snd wrs)
